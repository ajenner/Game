#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;

uniform vec3 textureColor;

vec4 lightPositionWorld = vec4(0.0, 50.0, 20.0, 1.0); // Light position in world coords.
vec3 Ls = vec3(1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3(0.7, 0.7, 0.7); // Light source intensity
vec3 La = vec3(0.6, 0.6, 0.6); // grey ambient colour

vec3 Ks = vec3(1.0, 1.0, 1.0); // fully reflect specular light
vec3 Kd = textureColor; // orange diffuse surface reflectance
vec3 Ka = vec3(1.0, 1.0, 1.0); // fully reflect ambient light

vec3 position_eye, normal_eye;

float specular_exponent = 100.0; // specular power

out vec4 fragment_colour; // final colour of surface

out vec3 eyepos;
out vec2 tex_points;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

void main(){
  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  normal_eye = vec3(ModelViewMatrix * vec4(vertex_normal, 0.0));
  // Position in view space
  position_eye = vec3(ModelViewMatrix * vec4(vertex_position,1.0));

  //ambient intensity
  vec3 Ia = La * Ka;

  //diffuse intensity
  vec3 N = normalize( NormalMatrix * vertex_normal);
  vec3 light_position_eye = vec3(view * lightPositionWorld);
  vec3 L = normalize(light_position_eye - position_eye);
  float dot_prod = max(dot(L,N), 0.0);
  vec3 Id = Ld * Kd * dot_prod;

  // specular intensity
  vec3 R = reflect(-L, N);
  vec3 V = normalize(-position_eye);
  float dot_prod_specular = max(dot(R,V), 0.0);
  float specular_factor = pow(dot_prod_specular, specular_exponent);
  vec3 Is = Ls * Ks * specular_factor;
  
  //final colour
  fragment_colour = vec4(Is + Id + Ia, 1.0);

  eyepos = position_eye;
  tex_points = vertex_texture;
  // Convert position to clip coordinates and pass along
  gl_Position = proj * vec4(position_eye,1.0);
}
